// Copyright 2014 The Oppia Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * Directive for the CodeWithTests interactive widget.
 *
 * IMPORTANT NOTE: The naming convention for customization args that are passed
 * into the directive is: the name of the parameter, followed by 'With',
 * followed by the name of the arg.
 */
oppia.directive('oppiaInteractiveCodeWithTests', [
  'oppiaHtmlEscaper', function(oppiaHtmlEscaper) {
    return {
      restrict: 'E',
      scope: {},
      templateUrl: 'interaction/CodeWithTests',
      controller:  ['$scope', '$attrs', function($scope, $attrs) {
        $scope.language = oppiaHtmlEscaper.escapedJsonToObj($attrs.languageWithValue);
        $scope.placeholder = oppiaHtmlEscaper.escapedJsonToObj($attrs.placeholderWithValue);
        $scope.tests = oppiaHtmlEscaper.escapedJsonToObj($attrs.testsWithValue);
        $scope.hasLoaded = false;

        $scope.debugOutput = '';
        $scope.errorMessage = '';
        var testResults = [];

        // Keep the code string given by the user and the stdout from the
        // evaluation until sending them back to the server.
        $scope.code = ($scope.placeholder || '');

        $scope.loadCodeEditor = function(editor) {
          editor.setValue($scope.code);
          editor.setOption('mode', $scope.language);
          editor.setOption('lineNumbers', true);
          editor.setOption('indentUnit', 4);

          // Map the 'Tab' key to type spaces, instead of a tab character.
          editor.setOption('extraKeys', {
            'Tab': function(cm) {
              var spaces = Array(cm.getOption('indentUnit') + 1).join(' ');
              cm.replaceSelection(spaces, 'end');
            }
          });

          // NOTE: this is necessary to avoid the textarea being greyed-out.
          setTimeout(function() {
            editor.refresh();
          }, 200);

          editor.on('change', function(instance, change) {
            $scope.code = editor.getValue();
          });
        };

        var _resetRunner = function() {
          // $scope.debugOutput = '';
          $scope.errorMessage = '';
          testResults = [];
        };

        // Set up the jsrepl instance.
        var jsrepl = new JSREPL({
          output: function(out) {
            // This is the console output. Note that output() is called before result(),
            // and that it is called twice, once in each run.
            $scope.debugOutput += out;
            $scope.$apply();
          },
          // Each snippet of code in $scope.tests should consist of a function
          // run_test() which takes no arguments and returns a two-element list.
          // The first value in this list should be a string representing the 'type'
          // of the test result (e.g. 'success', 'failure', 'missed_base_case', etc.)
          // and the second value should be an optional message that is meant for
          // display to the learner.
          //
          // The argument 'res' here will be a 'STRINGIFIED' two-element list. (Not
          // sure how it's stringified, though, it's clearly not JSON...)
          //
          // TODO(sll): Start a new interpreter instance for each evaluation,
          // otherwise previous state will be maintained.
          result: function(res) {
            // Ignore null results generated by evaluating fullCode directly.
            if (res === null) {
              return;
            }

            // TODO(sll): Verify that 'res' actually represents a two-element
            // list.
            res = res.substr(2, res.length - 4);
            var resultAndMessage = res.split('\', \'');

            testResults.push({
              label: $scope.tests[testResults.length].label,
              result: resultAndMessage[0],
              message: resultAndMessage[1]
            });

            if (testResults.length === $scope.tests.length) {
              $scope.submit(testResults);
            }
          },
          error: function(err) {
            // TODO(sll): Stop all other tests from running?
            $scope.errorMessage = err;
            $scope.$apply();
          },
          timeout: {
            time: 10000,
            callback: function() {
              // TODO(sll): Stop all other tests from running?
              $scope.errorMessage = 'Code timed out.';
            }
          },
        });

        jsrepl.loadLanguage($scope.language, function() {
          console.log('Code interaction initialized.');
          $scope.hasLoaded = true;
          $scope.$apply();
        });

        $scope.runCode = function(codeInput) {
          _resetRunner();
          $scope.code = codeInput;

          // Run the code. This triggers one of the callbacks set to jsrepl
          // which then calls $scope.submit with the result.
          // TODO(sll): Run checks? E.g. each line of code should start with 'def ',
          // a space, or 'import ' -- no global constants allowed.
          for (var i = 0; i < $scope.tests.length; i++) {
            var fullCode = codeInput + '\n' + $scope.tests[i].testCode;
            jsrepl.eval(fullCode);
            // For some reason, this must be run separately in order for jsrepl to
            // produce a non-null result.
            jsrepl.eval('run_test()');
          }
        };

        $scope.submit = function(testResults) {
          $scope.$parent.$parent.submitAnswer({
            code: $scope.code,
            testResults: testResults
          }, 'submit');
        };
      }]
    };
  }
]);


oppia.directive('oppiaResponseCodeWithTests', [
  'oppiaHtmlEscaper', function(oppiaHtmlEscaper) {
    return {
      restrict: 'E',
      scope: {},
      templateUrl: 'response/CodeWithTests',
      controller: ['$scope', '$attrs', function($scope, $attrs) {
        $scope.answer = oppiaHtmlEscaper.escapedJsonToObj($attrs.answer);
      }]
    };
  }
]);
