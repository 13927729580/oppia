author_notes: ''
blurb: ''
default_skin: snapshots_v1
init_state_name: First State
language_code: en
objective: Explore Turtle Geometry
param_changes:
- customization_args:
    parse_with_jinja: true
    value: ''
  generator_id: Copier
  name: PencilCode0initialCode
param_specs:
  PencilCode0initialCode:
    obj_type: UnicodeString
schema_version: 5
skin_customizations:
  panels_contents:
    main:
    - customization_args: {}
      gadget_id: PencilCode
      visible_in_states:
      - First State
      - Building the Turtle a Home
      - Reducing Code through Loops
      - Decomposition of Drawing a Square
      - Using Patterns to Draw a Pentagon
      - Algorithm Question
      - Designing a General Algorithm Part 2
      - Conclusion
states:
  Algorithm Question:
    content:
    - type: text
      value: <p></p>Look at the instructions you developed for the pentagon and compare
        it to the instructions for the square. What relationship or pattern do you
        notice between the number of instructions you wrote and the sides of the polygon?
    interaction:
      customization_args:
        choices:
          value:
          - <p><b>Equal</b> - The number lines of code is approximately&nbsp;equal
            to the number of sides for the polygon (4 lines of code for a square,
            5 lines of code for a pentagon).</p>
          - <p><b>2x</b> - The number&nbsp;lines of code is approximately twice as
            much as the number of sides of the polygon (8 lines of code for a square,
            10 lines of code for a pentagon).</p>
          - <p><b>3x</b> - The number of lines of code is approximately three times
            as much as the number of sides of the polygon (12 lines of code for a
            square, 15 lines of code for a pentagon).</p>
      handlers:
      - name: submit
        rule_specs:
        - definition:
            inputs:
              x: 1
            name: Equals
            rule_type: atomic
            subject: answer
          dest: Designing a General Algorithm
          feedback: []
          param_changes: []
        - definition:
            rule_type: default
          dest: Algorithm Question Feedback
          feedback: []
          param_changes: []
      id: MultipleChoiceInput
      triggers: []
    param_changes: []
  Algorithm Question Feedback:
    content:
    - type: text
      value: "<p>Here is one example of instructions for a pentagon:</p><p><br></p><ol><li>fd\
        \ 100 \_ \_# Move forward 100 steps</li><li><span>rt 72 \_ \_ \_ # Turn right\
        \ 72 degrees</span></li><li><span>fd 100 \_ \_# Move forward 100 steps</span></li><li><span>rt\
        \ 72 \_ \_ \_ # Turn right 72 degrees</span></li><li><span>fd 100 \_ \_# Move\
        \ forward 100 steps</span></li><li><span>rt 72 \_ \_ \_ # Turn right 72 degrees</span></li><li><span>fd\
        \ 100 \_ \_# Move forward 100 steps</span></li><li><span>rt 72 \_ \_ \_ #\
        \ Turn right 72 degrees</span></li><li><span>fd 100 \_ \_# Move forward 100\
        \ steps</span></li><li><span>rt 72 \_ \_ \_ # Turn right 72 degrees</span></li></ol><div><b><b></b><br></b></div><p></p><p></p><p>A\
        \ 4 sided polygon (square) uses 8 lines of code and\_for 5 sides, 10 lines\
        \ of code are used. Click <b>Next</b> to go back and describe the relationship\
        \ between sides and lines of code.</p>"
    interaction:
      customization_args:
        buttonText:
          value: Next
      handlers:
      - name: submit
        rule_specs:
        - definition:
            rule_type: default
          dest: Algorithm Question
          feedback: []
          param_changes: []
      id: Continue
      triggers: []
    param_changes: []
  Building the Turtle a Home:
    content:
    - type: text
      value: <p>Why not give the turtle a home to sleep in? Continue adding commands
        to see if you can draw a house like the one in the image below. It's ok if
        you don't get it the first time, keep trying!</p><p><oppia-noninteractive-image
        filepath-with-value="&amp;quot;turtle_house.png&amp;quot;"></oppia-noninteractive-image><br></p><p>When
        your turtle has a house, click <b>Next</b>.</p><div><b></b></div><p></p>
    interaction:
      customization_args:
        buttonText:
          value: Next
      handlers:
      - name: submit
        rule_specs:
        - definition:
            rule_type: default
          dest: Reducing Code through Loops
          feedback: []
          param_changes: []
      id: Continue
      triggers: []
    param_changes:
    - customization_args:
        parse_with_jinja: true
        value: 'pen purple

          rt 90

          fd 100

          rt 90

          fd 100

          rt 90

          fd 100

          rt 90

          fd 100'
      generator_id: Copier
      name: PencilCode0initialCode
  Conclusion:
    content:
    - type: text
      value: "<p><span>Turtles drawing shapes through commands has a long tradition\
        \ of students learning how to develop algorithms in order to create their\
        \ own masterpieces. In fact many programming languages have their own implementation\
        \ of turtle or <oppia-noninteractive-link open_link_in_same_window-with-value=\"\
        false\" text-with-value=\"&amp;quot;Logo&amp;quot;\" url-with-value=\"&amp;quot;https://en.wikipedia.org/wiki/Logo_(programming_language)&amp;quot;\"\
        ></oppia-noninteractive-link>.\_You could continue to explore the possibilities\
        \ using</span><oppia-noninteractive-link open_link_in_same_window-with-value=\"\
        false\" text-with-value=\"&amp;quot;Pencil Code&amp;quot;\" url-with-value=\"\
        &amp;quot;https://gym.pencilcode.net/draw/#/draw/first.html&amp;quot;\"></oppia-noninteractive-link><span>as\
        \ well as</span><oppia-noninteractive-link open_link_in_same_window-with-value=\"\
        false\" text-with-value=\"&amp;quot;Blockly Games&amp;quot;\" url-with-value=\"\
        &amp;quot;https://blockly-games.appspot.com/&amp;quot;\"></oppia-noninteractive-link><span>as\
        \ determined by your preference or needs. There is a line drawing activity\
        \ in</span><oppia-noninteractive-link open_link_in_same_window-with-value=\"\
        false\" text-with-value=\"&amp;quot;CS Unplugged&amp;quot;\" url-with-value=\"\
        &amp;quot;http://csunplugged.com/line-drawing/&amp;quot;\"></oppia-noninteractive-link><span>as\
        \ well. If you are interested in more\_math problems that can be best solved\
        \ algorithmically try the</span><oppia-noninteractive-link open_link_in_same_window-with-value=\"\
        false\" text-with-value=\"&amp;quot;Project Euler&amp;quot;\" url-with-value=\"\
        &amp;quot;https://projecteuler.net/&amp;quot;\"></oppia-noninteractive-link><span>problems.</span></p>"
    interaction:
      customization_args:
        buttonText:
          value: End
      handlers:
      - name: submit
        rule_specs:
        - definition:
            rule_type: default
          dest: END
          feedback: []
          param_changes: []
      id: Continue
      triggers: []
    param_changes:
    - customization_args:
        parse_with_jinja: true
        value: "sides = 4\nfor [1..sides]\n  rt 360/sides\n  fd 100"
      generator_id: Copier
      name: PencilCode0initialCode
  Decomposition of Drawing a Square:
    content:
    - type: text
      value: "<p><span></span></p>Here is a description of your code for a square<div><br></div><div>fd\
        \ 100 \_ \_ # Move forward 100 steps</div><div>rt 90 \_ \_ \_ \_# Turn right\
        \ 90 degrees</div><div>fd 100 \_ \_\_# Move forward 100 steps</div><div>rt\
        \ 90 \_ \_ \_ \_# Turn right 90 degrees</div><div>fd 100 \_ \_\_# Move forward\
        \ 100 steps</div><div>rt 90 \_ \_ \_ \_# Turn right 90 degrees</div><div>fd\
        \ 100 \_ \_\_# Move forward 100 steps</div><div>rt 90 \_ \_ \_ \_# Turn right\
        \ 90 degrees</div><div><br><div><p></p><p>Click\_<b>Next</b> to continue.</p></div></div>"
    interaction:
      customization_args:
        buttonText:
          value: Next
      handlers:
      - name: submit
        rule_specs:
        - definition:
            rule_type: default
          dest: Using Patterns to Draw a Pentagon
          feedback: []
          param_changes: []
      id: Continue
      triggers: []
    param_changes:
    - customization_args:
        parse_with_jinja: true
        value: 'pen purple

          fd 100

          rt 90

          fd 100

          rt 90

          fd 100

          rt 90

          fd 100

          rt 90'
      generator_id: Copier
      name: PencilCode0initialCode
  Decomposition of Drawing a Square Intro:
    content:
    - type: text
      value: "<p>Let's apply Computational Thinking so your turtle can draw a regular\
        \ (equal sided) polygon with any number of sides (e.g. pentagon, decagon).\
        \ To make this challenge more manageable, we can break this problem into smaller\
        \ problems that might be easier to solve. Breaking a problem down into smaller\
        \ ones is referred to as<span>\_</span><b>decomposition</b>.<br></p><p><br></p><p>Click\
        \ <b>Next</b> to continue.</p>"
    interaction:
      customization_args:
        buttonText:
          value: Next
      handlers:
      - name: submit
        rule_specs:
        - definition:
            rule_type: default
          dest: Decomposition of Drawing a Square
          feedback: []
          param_changes: []
      id: Continue
      triggers: []
    param_changes: []
  Designing a General Algorithm:
    content:
    - type: text
      value: "<p><b></b></p><p>Yes that's right.\_<b>Recognizing patterns</b>\_within\
        \ data is another crucial step in computational thinking because it provides\
        \ us with the key pieces of information we need to determine if and what the\
        \ underlying principle might be.</p><p><br></p><p>Now that we know there is\
        \ a correlation between number of instructions and the angle we can take that\
        \ <b>generalization</b> and build an <b>algorithm</b> which is a set of instructions\
        \ that applies to similar problems.</p><p><br></p><p>Click <b>Next</b> to\
        \ continue.</p><p></p><p></p>"
    interaction:
      customization_args:
        buttonText:
          value: Next
      handlers:
      - name: submit
        rule_specs:
        - definition:
            rule_type: default
          dest: Designing a General Algorithm Part 2
          feedback: []
          param_changes: []
      id: Continue
      triggers: []
    param_changes: []
  Designing a General Algorithm Part 2:
    content:
    - type: text
      value: "<p></p>We can reuse some of the code with which you built your turtle's\
        \ house, with two modifications to this algorithm in order to generalize it\
        \ for all polygons.<p><br></p><p>In the code on the right, change<span>\_\
        </span><b>sides\_= 4</b>.\_Next, modify\_the\_<b><span>for</span></b><span>\_\
        </span>statement from <b>4\_</b>to<span>\_</span><b>sides</b><span>\_</span>so\
        \ the indented instructions will repeat as many times as equal to\_<b>sides</b>.<br></p><p><br></p><p>You\
        \ may have discovered the turn angle equals 360/sides since your turtle is\
        \ making a round trip back to where it started. So change line number 3 from<span>\_\
        </span><b><span>rt 90</span></b>\_to<span>\_</span><b><span>360/sides </span></b>to\
        \ calculate the angle based on the number of sides. Run the program with different\
        \ values for <b>sides</b>.<br></p><p><br></p><p>When you are finished click<span>\_\
        </span><b>Next</b>.</p>"
    interaction:
      customization_args:
        buttonText:
          value: Next
      handlers:
      - name: submit
        rule_specs:
        - definition:
            rule_type: default
          dest: Conclusion
          feedback: []
          param_changes: []
      id: Continue
      triggers: []
    param_changes:
    - customization_args:
        parse_with_jinja: true
        value: "sides = 0\nfor [1..4]\n  rt 90\n  fd 100"
      generator_id: Copier
      name: PencilCode0initialCode
  First State:
    content:
    - type: text
      value: "<div></div>After weeks of training, you have succeeded in training your\
        \ pet turtle to hold a pen in its mouth and move and turn according to your\
        \ commands. Now see if you can teach the turtle to draw some shapes.<div><br></div><div>Try\
        \ giving it a few more commands so it will draw a square. Use <b>fd</b> to\
        \ move the turtle forward by a certain amount and <b>rt</b> to turn it by\
        \ a certain number of degrees for example:\_</div><div><br></div><p><b><span>fd\
        \ 100</span></b></p><b><span>rt 90</span></b><div><br></div><div>moves the\
        \ turtle forward 100 pixels and turn right 90 degrees. When you have added\
        \ additional code click the play button to run the code again\_<oppia-noninteractive-image\
        \ filepath-with-value=\"&amp;quot;pencil_code_play_small.png&amp;quot;\"></oppia-noninteractive-image></div><p><br></p><p>When\
        \ you are ready to move on, click <b>Next</b>.</p>"
    interaction:
      customization_args:
        buttonText:
          value: Next
      handlers:
      - name: submit
        rule_specs:
        - definition:
            rule_type: default
          dest: Building the Turtle a Home
          feedback: []
          param_changes: []
      id: Continue
      triggers: []
    param_changes:
    - customization_args:
        parse_with_jinja: true
        value: 'pen purple

          fd 100

          rt 90

          fd 100'
      generator_id: Copier
      name: PencilCode0initialCode
  Reducing Code through Loops:
    content:
    - type: text
      value: "<p>Your turtle is so well trained it will even repeat some instructions\
        \ as long as you tell it which instructions to repeat and how many times.\
        \ We can rewrite the house instructions using the\_<b><span>for [a..b] </span></b>command\
        \ which tells the turtle what number to start with and what number to end\
        \ with. This cuts the number of commands we told our turtle almost in half!</p><p><br></p><p>We'll\
        \ use this information later when we want to develop an algorithm to draw\
        \ any type of regular polygon.</p><p><br></p><p>Click <b>Next</b>.</p>"
    interaction:
      customization_args:
        buttonText:
          value: Next
      handlers:
      - name: submit
        rule_specs:
        - definition:
            rule_type: default
          dest: Decomposition of Drawing a Square Intro
          feedback: []
          param_changes: []
      id: Continue
      triggers: []
    param_changes:
    - customization_args:
        parse_with_jinja: true
        value: "pen purple\nfor [1..4]\n  #Indented commands repeat\n  rt 90\n  fd\
          \ 100\n#These commands are not repeated\nrt 30\nfd 100\nrt 120\nfd 100"
      generator_id: Copier
      name: PencilCode0initialCode
  Using Patterns to Draw a Pentagon:
    content:
    - type: text
      value: "<p><span>A simplified version of these instructions are:</span></p><p><span><br></span></p><p><span>Repeat\
        \ the following 4 times</span></p><p></p><div>fd 100 \_ \_ # Move forward\
        \ 100 steps</div><div>rt 90 \_ \_ \_ \_# Turn right 90 degrees</div><p></p><p><span><br></span></p><p><span>Click\
        \ </span><b>Next</b><span> to use what you have learned from this pattern\
        \ to draw a new shape.</span><br></p>"
    interaction:
      customization_args:
        buttonText:
          value: Next
      handlers:
      - name: submit
        rule_specs:
        - definition:
            rule_type: default
          dest: Using Patterns to Draw a Pentagon Part 2
          feedback: []
          param_changes: []
      id: Continue
      triggers: []
    param_changes:
    - customization_args:
        parse_with_jinja: true
        value: 'pen purple

          fd 100

          rt 90

          fd 100

          rt 90

          fd 100

          rt 90

          fd 100

          rt 90'
      generator_id: Copier
      name: PencilCode0initialCode
  Using Patterns to Draw a Pentagon Part 2:
    content:
    - type: text
      value: "<p>Write down some code on a piece of paper you would use to create\
        \ a 5 sided polygon (see the image below).</p><p><br></p><p></p>Once you have\
        \ some code, test out your ideas in Pencil Code with the turtle. Making mistakes\
        \ along the way is a good thing since you can learn from them.<p><oppia-noninteractive-image\
        \ filepath-with-value=\"&amp;quot;turtle_pentagon.png&amp;quot;\"></oppia-noninteractive-image></p><p><span>When\
        \ your turtle has drawn a pentagon and you have the instructions written out,\
        \ click\_</span><b>Next</b><span>.</span><br></p><p></p>"
    interaction:
      customization_args:
        buttonText:
          value: Next
      handlers:
      - name: submit
        rule_specs:
        - definition:
            rule_type: default
          dest: Algorithm Question
          feedback: []
          param_changes: []
      id: Continue
      triggers: []
    param_changes: []
tags: []
